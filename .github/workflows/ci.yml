name: BioNexus CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  lint-and-test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov black isort ruff
    
    - name: Lint with ruff
      run: |
        cd backend
        ruff check app/
    
    - name: Format check with black
      run: |
        cd backend
        black --check app/
    
    - name: Import sorting check with isort
      run: |
        cd backend
        isort --check-only app/
    
    - name: Run tests
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

  lint-and-test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install pnpm
      run: npm install -g pnpm
    
    - name: Install dependencies
      run: |
        cd frontend
        pnpm install
    
    - name: Lint
      run: |
        cd frontend
        pnpm lint
    
    - name: Type check
      run: |
        cd frontend
        pnpm type-check
    
    - name: Build
      run: |
        cd frontend
        pnpm build

  integration-tests:
    runs-on: ubuntu-latest
    needs: [lint-and-test-backend, lint-and-test-frontend]
    
    services:
      neo4j:
        image: neo4j:5.15-community
        env:
          NEO4J_AUTH: neo4j/testpassword
        ports:
          - 7687:7687
          - 7474:7474
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Wait for Neo4j
      run: |
        timeout 60s bash -c 'until docker exec $(docker ps -qf "ancestor=neo4j:5.15-community") cypher-shell -u neo4j -p testpassword "RETURN 1;"; do sleep 2; done'
    
    - name: Set up test database
      run: |
        docker exec $(docker ps -qf "ancestor=neo4j:5.15-community") cypher-shell -u neo4j -p testpassword "
        CREATE CONSTRAINT IF NOT EXISTS FOR (p:Publication) REQUIRE p.pub_id IS UNIQUE;
        CREATE CONSTRAINT IF NOT EXISTS FOR (pg:Page) REQUIRE pg.page_id IS UNIQUE;
        CREATE CONSTRAINT IF NOT EXISTS FOR (e:Entity) REQUIRE e.entity_id IS UNIQUE;"
    
    - name: Run integration tests
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: testpassword
      run: |
        cd backend
        pytest tests/integration/ -v

  smoke-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and start services
      run: |
        docker-compose -f infra/docker-compose.yml up -d --build
        
    - name: Wait for services
      run: |
        timeout 300s bash -c '
        until curl -f http://localhost:8000/health; do
          echo "Waiting for backend..."
          sleep 10
        done
        until curl -f http://localhost:3000; do
          echo "Waiting for frontend..."  
          sleep 10
        done'
    
    - name: Run smoke tests
      run: |
        # Test API health
        curl -f http://localhost:8000/health
        
        # Test search endpoint
        curl -f -X POST http://localhost:8000/search/semantic \
          -H "Content-Type: application/json" \
          -d '{"query": "test", "top_k": 5}'
        
        # Test graph endpoint
        curl -f http://localhost:8000/kg/visualization
        
        # Test frontend loads
        curl -f http://localhost:3000
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f infra/docker-compose.yml down

  build-and-push-images:
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (backend)
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata (frontend)  
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}